name: .NET Core
on:
  push:
    tags:
      - '**'
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - run: git fetch --prune --unshallow

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.9
      with:
          versionSpec: '5.6.8'

    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.9

    - uses: actions/setup-java@v1
      with:
        java-version: '11.0.x'
        java-package: jre
        architecture: x64
        
    - name: Setup SonarScanner
      run: dotnet tool install --tool-path artifacts dotnet-sonarscanner

    - name: Setup ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: SonarScanner begin
      run: artifacts/dotnet-sonarscanner begin /k:"TarCompressCrypt" /o:"lucca" /d:sonar.login=${{ secrets.SONAR_TOKEN }} /d:sonar.host.url="https://sonarcloud.io/" /d:sonar.coverageReportPaths="./sonarCoverage/SonarQube.xml"

    - name: Test
      run: dotnet test --configuration Release /p:CollectCoverage=true --collect:"XPlat Code Coverage" --settings coverlet.runsettings --results-directory:./coverage
      env:
        AZ_SAS_TOKEN: ${{ secrets.AZ_SAS_TOKEN }}
        AZ_URL: ${{ secrets.AZ_URL }}

    - name: Merge coverages
      run: reportgenerator -reports:./coverage/*/*.xml -targetdir:./sonarCoverage -reporttypes:SonarQube

    - name: SonarScanner end
      run: artifacts/dotnet-sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Pack dotnet tool
      run: dotnet pack TCC\TCC.csproj --configuration Release -o artifacts -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}

    - name: Nuget prerelease push
      run: dotnet nuget push "artifacts/**/TCC*.nupkg" --skip-duplicate --source https://nuget.pkg.github.com/LuccaSA/index.json -k ${{ secrets.PACKAGE_TOKEN }}
      env:
        PACKAGE_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          
    - name: Nuget org push
      if: startsWith(github.ref, 'refs/tags/')
      run: dotnet nuget push "artifacts/**/TCC*.nupkg" --skip-duplicate --source https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_PUBLISH }}
      env:
        NUGET_PUBLISH: ${{ secrets.NUGET_PUBLISH }}

    - name: Pack exe
      if: startsWith(github.ref, 'refs/tags/')
      run: dotnet publish TCC\TCC.csproj -c Release -o published -r win10-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:VersionPrefix="${{ env.GitVersion_SemVer }}" /p:AssemblyVersion="${{ env.GitVersion_AssemblySemVer }}"

    - name: Zip
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        Remove-Item "artifact" -Recurse -ErrorAction Ignore
        New-Item -Name "artifact" -ItemType Directory
        Compress-Archive -Path published\* -DestinationPath artifact\TCC-${{ env.GitVersion_SemVer }}.zip
      shell: powershell

    - name: Get release
      if: startsWith(github.ref, 'refs/tags/')
      id: get_release
      uses: bruceadams/get-release@v1.2.2
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: artifact\TCC-${{ env.GitVersion_SemVer }}.zip
        asset_name: TCC-${{ env.GitVersion_SemVer }}.zip
        asset_content_type: application/zip